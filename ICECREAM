#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct listNode {
	char data[100];
	int price;
	struct listNode *link;
}listNode;

typedef struct {
	listNode *head;
}linkedList_h;

linkedList_h* createLinkedList_h();
void printList(linkedList_h *L);
void freeLinkedList_h(linkedList_h* L);
//listNode *searchNode(linkedList_h *L, char *x);
linkedList_h* insertFirstNode(linkedList_h *L, char *x, int price);
void insertMiddleNode( linkedList_h *L, listNode *pre, char *x, int price);
void insertLastNode( linkedList_h *L, char *x, int price);



int main() {
	linkedList_h *L;
	listNode *O;
	L = createLinkedList_h();
	L = insertFirstNode(L, "Chocolate", 3000);
	L = insertFirstNode(L, "Jamoca_coffee", 2900);
	insertLastNode(L, "Strawberry", 3100);
	insertLastNode(L, "Rocky_Road", 3400);
	insertLastNode(L, "Vanilla", 3030);
	insertLastNode(L, "Chocolate_chip_cookie_dough", 1200);
	insertLastNode(L, "Mint_chip", 7900);
	insertLastNode(L, "Chcolate_chip", 1200);
	insertLastNode(L, "Praliness'n_cream", 3600);
	insertLastNode(L, "Rainbow_sherbet", 3200);
	insertLastNode(L, "Gold_medal_ribbon", 1000);
	insertLastNode(L, "Cotten_candy", 1000);
	insertLastNode(L, "Blaclc_currant", 3030);
	insertLastNode(L, "Tiramisa", 3330);
	insertLastNode(L, "Litchi_gold", 2500);
	insertLastNode(L, "Mississippi_Mud", 7000);
	insertLastNode(L, "Alphonso'N'cream", 1200);
	insertLastNode(L, "Papaya pineapple", 6000);
	insertLastNode(L, "Butterscrotch_ribbon", 1010);
	insertLastNode(L, "Puss_in_boots", 5000);
	sort(L);
	printList(L);
	freeLinkedList_h(L);
	return 0;
}

linkedList_h* createLinkedList_h() {
	linkedList_h *L;
	L = (linkedList_h*)malloc(sizeof(linkedList_h));
	L->head = NULL;
	return L;
}

void printList(linkedList_h *L) {
	listNode *p = L->head;
	printf("이름 가격\n"); 
	while(p) {
		printf("%s %d \n", p->data, p->price);
		p= p->link;
	}
}

void freeLinkedList_h(linkedList_h* L) {
	listNode *p;
	while(L->head) {
		p=L->head;
		L->head = p->link;
		free(p);
	}
}

linkedList_h* insertFirstNode(linkedList_h *L, char* x, int price) {
	listNode *p;
	p = (listNode*)malloc(sizeof(listNode));
	strcpy(p->data, x);
	p->price = price;
	p->link = L->head;
	L->head = p;
	return L;
}

void insertMiddleNode( linkedList_h *L, listNode *pre, char *x, int price) {
	if(L) {
		listNode *p;
		p = (listNode*)malloc(sizeof(listNode));
		strcpy(p->data, x);
		p->price = price;
		p->link = pre->link;
		pre->link = p;
	}
}


void insertLastNode( linkedList_h *L, char *x, int price) {
	listNode *p = L->head;
	while(p) {
		if(p->link == NULL) break;
		p = p->link;
	}
	listNode *n;
	n = (listNode*)malloc(sizeof(listNode));
	strcpy(n->data, x);
	n->price = price;
	n->link = p->link;
	p->link = n;
}

void swap(listNode *n1, listNode *n2) {
	char temp[100];
	strcpy(temp, n1->data);
	strcpy(n1->data, n2->data);
	strcpy(n2->data, temp);
}

int getsize(linkedList_h* L) {
	listNode *p = L->head;
	int count = 0;
	while(p) {
		count++;
		p = p->link;
	}
	return count;
}

void sort(linkedList_h *L) {
	int i;
	listNode *p = L->head;
	listNode *buf;
	int cnt = 0;
	int size = getsize(L);
	while(p) {
		buf = L->head;
		for(i=1; i<size-cnt; i++) {
			if(buf->data[0] > buf->link->data[0]) {
				swap(buf, buf->link);
			}
			buf = buf->link;
		}
		p = p->link;
		cnt++;
	}
}
